class Solution {
    public boolean possible(int[] nums, int day, int m, int k){
        int n=nums.length-1, count=0, noOfB=0;
        for(int i=0;i<=n;i++){
            if(nums[i]<=day) count++;
         else{
             noOfB+=(count/k);
             count=0;
        } 
        }noOfB+=(count/k);
          return noOfB>=m;
    }

    public int minDays(int[] bloomDay, int m, int k) {
        int val =  m*k;
        int n= bloomDay.length;
        if(n<val) return -1;
        int min=Integer.MAX_VALUE, max=Integer.MIN_VALUE;
        for(int x: bloomDay){
            max=Math.max(max,x);
            min=Math.min(min,x);
        }
        int low=min, high=max, ans=-1;
        while(low<=high){
            int mid=low+(high-low)/2;
            if(possible(bloomDay, mid, m, k)){
                ans=mid;
                high=mid-1;
            } else {
                low=mid+1;
            }

        } return ans;
        
    }
}