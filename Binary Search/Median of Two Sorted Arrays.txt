class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1 = nums1.length, n2 = nums2.length;
        int n = n1 + n2;
        int i = 0, j = 0;
        int ind2 = n / 2, ind1 = ind2 - 1;
        int ind1el = -1, ind2el = -1, count = 0;

        while (i < n1 && j < n2) {
            if (nums1[i] < nums2[j]) {
                if (count == ind1) ind1el = nums1[i];
                if (count == ind2) ind2el = nums1[i];
                i++;
            } else {
                if (count == ind1) ind1el = nums2[j];
                if (count == ind2) ind2el = nums2[j];
                j++;
            }
            count++;
        }

        // Remaining elements of nums1
        while (i < n1) {
            if (count == ind1) ind1el = nums1[i];
            if (count == ind2) ind2el = nums1[i];
            i++;
            count++;
        }

        // Remaining elements of nums2
        while (j < n2) {
            if (count == ind1) ind1el = nums2[j];
            if (count == ind2) ind2el = nums2[j];
            j++;
            count++;
        }

        // If odd length, return middle element
        if (n % 2 == 1) return (double) ind2el;

        // Else return average of two middle elements
        return (ind1el + ind2el) / 2.0;
    }
}
